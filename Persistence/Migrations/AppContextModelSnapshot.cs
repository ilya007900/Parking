// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingService.Persistence;

namespace ParkingService.Persistence.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ParkingService.Domain.Entities.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Floor");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("ParkingLevel", "dbo");
                });

            modelBuilder.Entity("ParkingService.Domain.Entities.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.HasKey("Id");

                    b.ToTable("Parking", "dbo");
                });

            modelBuilder.Entity("ParkingService.Domain.Entities.ParkingSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<int?>("FloorId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Number");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("ParkingSpace", "dbo");
                });

            modelBuilder.Entity("ParkingService.Domain.Entities.Floor", b =>
                {
                    b.HasOne("ParkingService.Domain.Entities.Parking", null)
                        .WithMany("Floors")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParkingService.Domain.Entities.Parking", b =>
                {
                    b.OwnsOne("ParkingService.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ParkingId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.HasKey("ParkingId");

                            b1.ToTable("Parking");

                            b1.WithOwner()
                                .HasForeignKey("ParkingId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ParkingService.Domain.Entities.ParkingSpace", b =>
                {
                    b.HasOne("ParkingService.Domain.Entities.Floor", null)
                        .WithMany("ParkingSpaces")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ParkingService.Domain.Vehicle", "Vehicle", b1 =>
                        {
                            b1.Property<int>("ParkingSpaceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<string>("LicensePlate")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("VehicleLicensePlate");

                            b1.Property<int>("Weight")
                                .HasColumnType("int")
                                .HasColumnName("VehicleWeight");

                            b1.HasKey("ParkingSpaceId");

                            b1.ToTable("ParkingSpace");

                            b1.WithOwner()
                                .HasForeignKey("ParkingSpaceId");
                        });

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ParkingService.Domain.Entities.Floor", b =>
                {
                    b.Navigation("ParkingSpaces");
                });

            modelBuilder.Entity("ParkingService.Domain.Entities.Parking", b =>
                {
                    b.Navigation("Floors");
                });
#pragma warning restore 612, 618
        }
    }
}
